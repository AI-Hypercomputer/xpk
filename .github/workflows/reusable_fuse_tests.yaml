# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

name: Fuse Tests

on:
  workflow_call:
    inputs:
      cluster-name:
        type: string
        required: true
      tpu-type:
        description: 'TPU Type'
        required: false
        default: 'v4-8'
        type: string
      zone:
        type: string
        required: true
      location:
        type: string
        required: true
      run-id:
        required: true
        type: string

jobs:
  run-fuse-workload:
    runs-on: [ubuntu-22.04]
    env:
      FUSE_STORAGE_NAME: ${{secrets.INSTANCE_NAME}}-test-${{inputs.run-id}}
      FUSE_DELETE_WORKLOAD: "fuse-delete-workload"
      FUSE_READ_WORKLOAD: "fuse-read-workload"
      FUSE_WRITE_WORKLOAD: "fuse-write-workload"
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
    - uses: google-github-actions/setup-gcloud@v2
      with:
        version: '>= 363.0.0'
        install_components: 'beta,gke-gcloud-auth-plugin'
    - name: Generate random seed
      run: |
        RANDOM_SEED=$((RANDOM % 10000))  # Generate a random number between 0 and 9999
        echo "RANDOM_SEED=$RANDOM_SEED" >> $GITHUB_ENV
    - name: Install kubectl
      run: gcloud components install kubectl
    - name: Verify gcp setup
      run: gcloud info
    - name: Set Google Cloud CLI properties to a unused zone to verify --zone arg is passed properly in commands.
      run: |
        gcloud config set compute/zone us-east4-a
        gcloud config get compute/zone
    - name: Prepare directories
      run: mkdir -p ~/.cache/pip
    - name: Restore cached dependencies
      uses: actions/cache@v4
      with:
        path: |
              /usr/local/bin/kubectl-kueue
              /usr/local/bin/kubectl-kjob
              ~/.cache/pip
              ${{env.pythonLocation}}
        key: xpk-deps-3.10-${{inputs.run-id}}
        restore-keys: xpk-deps-3.10-
    - name: Install expect package
      run: sudo apt-get install expect
    - name: Verify xpk installation
      run: xpk --help
    - name: Authenticate Docker
      run: gcloud auth configure-docker --quiet
    - name: Attach auto-mount GCP Filestore Storage instance
      run: |
        python3 xpk.py storage attach $FUSE_STORAGE_NAME --cluster=${{inputs.cluster-name}} --zone=${{inputs.zone}} --type=gcsfuse \
        --auto-mount=true \
        --mount-point='/fuse-test-mount-point' --readonly=false --manifest='./tests/data/pv-pvc-templates.yaml'
    - name: List and verify existing Storages
      run: python3 xpk.py storage list --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}} | tee output.txt | grep $FUSE_STORAGE_NAME || (echo 'No storage found' && exit 143)
    - name: Verify VolumeBundle created
      run: kubectl get volumebundle $FUSE_STORAGE_NAME -o jsonpath='{.spec.containerVolumeMounts[0].mountPath}' | grep '/fuse-test-mount-point'
    - name: Run workload to write file on filestore
      run : python3 xpk.py workload create --workload $FUSE_WRITE_WORKLOAD --docker-image='marketplace.gcr.io/google/ubuntu2004' --command "mkdir /fuse-test-mount-point/$RANDOM_SEED/ && echo 'Test text message' > /fuse-test-mount-point/$RANDOM_SEED/test.txt || (echo 'Writing to filestore failed' && exit 143)" --cluster ${{inputs.cluster-name}} --tpu-type=${{inputs.tpu-type}} --zone ${{inputs.location}}
    - name: Wait for writer workload completion and confirm it succeeded
      run: python3 xpk.py workload list --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}} --wait-for-job-completion $FUSE_WRITE_WORKLOAD --timeout 300
    - name: Run workload to read file on filestore
      run : python3 xpk.py workload create --workload $FUSE_READ_WORKLOAD --command "grep 'Test text message' /fuse-test-mount-point/$RANDOM_SEED/test.txt || (echo 'Reading from filestore failed' && exit 143)" --cluster ${{inputs.cluster-name}} --tpu-type=${{inputs.tpu-type}} --zone ${{inputs.location}}
    - name: Wait for reader workload completion and confirm it succeeded
      run: python3 xpk.py workload list --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}} --wait-for-job-completion $FUSE_READ_WORKLOAD --timeout 300
    - name: Create batch-read.sh script
      run: |
        cat <<EOF > batch-read.sh
        #!/bin/bash
        grep 'Test text message' /fuse-test-mount-point/$RANDOM_SEED/test.txt || (echo 'Reading from filestore failed' && exit 143)
        EOF
    - name: Run a batch-read job on the cluster
      run: python3 xpk.py batch --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}} batch-read.sh | tee batch-read.log
    - name: Get job name
      run: |
        READ_JOB_NAME=$(cat batch-read.log | grep 'xpk-def-app-profile-slurm-' | awk -F': ' '{print $2}')
        echo "READ_JOB_NAME=${READ_JOB_NAME}" >> $GITHUB_ENV
    - name: Wait for the batch-read job to finish
      run: |
        kubectl wait job.batch/$READ_JOB_NAME --for=condition=Complete --timeout=1m
    - name: Cancel the batch-read job
      run: python3 xpk.py job cancel $READ_JOB_NAME --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}} | grep "job.batch/$READ_JOB_NAME deleted"
    - name: Delete batch-read.log file
      run: rm batch-read.log
    - name: Run a run-read job on the cluster
      run: python3 xpk.py run --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}} batch-read.sh --timeout 60
    - name: Delete batch-read.sh file
      run: rm batch-read.sh
    - name: Create shell and exit it immediately
      run: |
        cat <<EOF >> create-shell.exp
        ##!/usr/bin/expect
        spawn python3 xpk.py shell --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}}
        expect "/ # "
        send "cat /fuse-test-mount-point/$RANDOM_SEED/test.txt\n"
        expect "Test text message"
        send "exit\n"
        EOF
        chmod +x ./create-shell.exp
        expect ./create-shell.exp
    - name: Stop the shell
      run: python3 xpk.py shell stop --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}}
    - name: Delete create-shell.exp file
      run: rm create-shell.exp
    - name: Run workload to delete file on filestore
      run : python3 xpk.py workload create --workload $FUSE_DELETE_WORKLOAD --command "rm -rf /fuse-test-mount-point/$RANDOM_SEED/test.txt || exit 143" --cluster ${{inputs.cluster-name}} --tpu-type=${{inputs.tpu-type}} --zone ${{inputs.location}}
    - name: Wait for delete workload completion and confirm it succeeded
      run: python3 xpk.py workload list --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}} --wait-for-job-completion $FUSE_DELETE_WORKLOAD --timeout 300
    - name: Delete storage
      run: python3 xpk.py storage delete $FUSE_STORAGE_NAME --zone=${{inputs.zone}} --cluster=${{inputs.cluster-name}}
    - name: Verify VolumeBundle deleted
      run: |
        ! kubectl get volumebundle | grep $FUSE_STORAGE_NAME
    - name: Delete the writer workload on the cluster
      if: always()
      run: python3 xpk.py workload delete --workload $FUSE_WRITE_WORKLOAD --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}}
    - name: Delete the reader workload on the cluster
      if: always()
      run: python3 xpk.py workload delete --workload $FUSE_READ_WORKLOAD --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}}
    - name: Delete the delete workload on the cluster
      if: always()
      run: python3 xpk.py workload delete --workload $FUSE_DELETE_WORKLOAD --cluster ${{inputs.cluster-name}} --zone=${{inputs.zone}} --force
